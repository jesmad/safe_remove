#!/bin/bash

totalAmount=$(ls -l | head -1)      #This will store the first line of the output of ls
									#which is 'total: some_number_of_bytes'

if [ "$#" -eq 0 ]; then 			#If no inline arguments passed
	totalAmount=$(ls -l | head -1)      #This will store the first line of the output of ls
									#which is 'total: some_number_of_bytes'
	echo "$(ls -lS | sed "1 d")"	#Sort the output by the number of bytes (descending ord.)
									#and delete the first line of the output 
	echo "$totalAmount"				#Add the total at the end 

else
	directoryFlag=0
	for arg in "$@"
	do
	
		#if [[ ( $arg =~ ^- || $arg =~ ^[^--] ) && $arg =~ [isgf] ]]; then				#If the argument has any invalid option, print an error message and terminate.
		if [[ $arg =~ ^-[^--] && $arg =~ [isgf] ]]; then				#If the argument has any invalid option, print an error message and terminate.
			#Option -f not accepted because it messes up with the sorting and formatting of lss. The resulting output of lss -lf is not in the format 
			#that the assignment wanted.
			echo "ERROR: Argument $arg was not accepted. Invalid option -i, -f, -s, and/or -g encountered."
			echo "Halting execution..."
			exit 1
		fi
		if [[ -e $arg && -d $arg ]]; then
			directoryFlag=1
		elif [[ ! -e $arg && $arg =~ ^[^-] ]]; then 			#If the argument is not an option, then it is considered to be a filename. If the file does not exist, print
																#an error message. 
			echo "lss: cannot access $arg: No such file or directory"
		fi
	done

	#totalAmount=$(ls -lS "$@" | grep '^total')     	

	if [[ "$directoryFlag" -eq 1 ]]; then						#Ensures that directories are listed and not descended into
		echo "$(ls -lSd "$@" 2>/dev/null)"
	else
		echo "$(ls -lS "$@" 2>/dev/null)"   #awk '!/^total/')"					#If all the arguments were valid then simply use ls to output the desired output.
	fi
	#echo "$totalAmount"
fi
